{
  "version": 3,
  "sources": ["../../@capacitor-mlkit/barcode-scanning/src/web.ts"],
  "sourcesContent": ["import { CapacitorException, ExceptionCode, WebPlugin } from '@capacitor/core';\n\nimport type {\n  BarcodeScannerPlugin,\n  GetMaxZoomRatioResult,\n  GetMinZoomRatioResult,\n  GetZoomRatioResult,\n  IsGoogleBarcodeScannerModuleAvailableResult,\n  IsSupportedResult,\n  IsTorchAvailableResult,\n  IsTorchEnabledResult,\n  PermissionStatus,\n  ReadBarcodesFromImageOptions,\n  ReadBarcodesFromImageResult,\n  ScanResult,\n  SetZoomRatioOptions,\n  StartScanOptions,\n} from './definitions';\n\nexport class BarcodeScannerWeb\n  extends WebPlugin\n  implements BarcodeScannerPlugin\n{\n  async startScan(_options?: StartScanOptions): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async stopScan(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async readBarcodesFromImage(\n    _options: ReadBarcodesFromImageOptions,\n  ): Promise<ReadBarcodesFromImageResult> {\n    throw this.createUnavailableException();\n  }\n\n  async scan(): Promise<ScanResult> {\n    throw this.createUnavailableException();\n  }\n\n  async isSupported(): Promise<IsSupportedResult> {\n    throw this.createUnavailableException();\n  }\n\n  async enableTorch(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async disableTorch(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async toggleTorch(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async isTorchEnabled(): Promise<IsTorchEnabledResult> {\n    throw this.createUnavailableException();\n  }\n\n  async isTorchAvailable(): Promise<IsTorchAvailableResult> {\n    throw this.createUnavailableException();\n  }\n\n  async setZoomRatio(_options: SetZoomRatioOptions): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async getZoomRatio(): Promise<GetZoomRatioResult> {\n    throw this.createUnavailableException();\n  }\n\n  async getMinZoomRatio(): Promise<GetMinZoomRatioResult> {\n    throw this.createUnavailableException();\n  }\n\n  async getMaxZoomRatio(): Promise<GetMaxZoomRatioResult> {\n    throw this.createUnavailableException();\n  }\n\n  async openSettings(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async isGoogleBarcodeScannerModuleAvailable(): Promise<IsGoogleBarcodeScannerModuleAvailableResult> {\n    throw this.createUnavailableException();\n  }\n\n  async installGoogleBarcodeScannerModule(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    throw this.createUnavailableException();\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    throw this.createUnavailableException();\n  }\n\n  private createUnavailableException(): CapacitorException {\n    return new CapacitorException(\n      'This Barcode Scanner plugin method is not available on this platform.',\n      ExceptionCode.Unavailable,\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;AAmBM,IAAO,oBAAP,cACI,UAAS;EAGjB,MAAM,UAAU,UAA2B;AACzC,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,WAAQ;AACZ,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,sBACJ,UAAsC;AAEtC,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,OAAI;AACR,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,cAAW;AACf,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,cAAW;AACf,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,eAAY;AAChB,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,cAAW;AACf,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,iBAAc;AAClB,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,mBAAgB;AACpB,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,aAAa,UAA6B;AAC9C,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,eAAY;AAChB,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,kBAAe;AACnB,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,kBAAe;AACnB,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,eAAY;AAChB,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,wCAAqC;AACzC,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,oCAAiC;AACrC,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,mBAAgB;AACpB,UAAM,KAAK,2BAA0B;EACvC;EAEA,MAAM,qBAAkB;AACtB,UAAM,KAAK,2BAA0B;EACvC;EAEQ,6BAA0B;AAChC,WAAO,IAAI,mBACT,yEACA,cAAc,WAAW;EAE7B;;",
  "names": []
}
