"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiAbstract = void 0;
const userLogout_1 = require("../eventBus/userLogout");
const apiError_1 = require("../http/apiError");
const apiRoute_1 = require("../http/apiRoute");
class ApiAbstract {
    constructor({ host, userStorage }) {
        this.host = host;
        this.userStorage = userStorage;
    }
    async fetcher({ route, postBody = null, options }) {
        const formData = new FormData();
        if (postBody) {
            for (let key in postBody) {
                if (postBody[key] instanceof FileList) {
                    for (const value of postBody[key]) {
                        formData.append(key + '[]', value);
                    }
                }
                else if (Array.isArray(postBody[key])) {
                    for (const value of postBody[key]) {
                        if (value !== null && typeof value == "object") {
                            formData.append(key + '[]', JSON.stringify(value));
                        }
                        else {
                            formData.append(key + '[]', value);
                        }
                    }
                }
                else if (typeof postBody[key] == "object") {
                    formData.append(key, JSON.stringify(postBody[key]));
                }
                else {
                    formData.append(key, postBody[key]);
                }
            }
        }
        let headers = {};
        if (options?.addToken) {
            const token = await this.getToken();
            headers["Authorization"] = `Bearer ${token}`;
        }
        else if (route.startsWith('/user') && !!postBody) {
            headers["timestamp"] = Date.now().toString();
        }
        const res = await fetch(this.host + "/api" + route, {
            headers: headers,
            method: postBody ? "POST" : "GET",
            body: postBody ? formData : null,
            credentials: "include",
            ...options
        });
        if (!res.ok) {
            if (res.status == 413)
                throw new apiError_1.ApiError(res.status, "Слишком большой размер файла");
            if (res.status == 401) {
                await this.userStorage.clearUser();
                await userLogout_1.eventBusUserLogout.broadcast();
            }
            if (res.status == 404 && !postBody) {
                if (!options?.noConsoleError)
                    console.warn(`not_found: ${this.host + "/api" + route}`);
            }
            try {
                //пробуем расшифровать json с ошибкой
                const answer = await res.json();
                const error = new apiError_1.ApiError(res.status, answer.message);
                throw error;
            }
            catch (error) {
                //ошибка расшифровки json
                if (!options?.noConsoleError)
                    console.warn({ url: this.host + "/api" + route });
                if (!(error instanceof apiError_1.ApiError))
                    throw new apiError_1.ApiError(res.status, res.statusText);
                throw error;
            }
        }
        return res.json();
    }
    async getToken() {
        const accessToken = await this.userStorage.getAccessToken();
        if (accessToken)
            return accessToken;
        const refreshToken = await this.userStorage.getRefreshToken();
        if (refreshToken) {
            //перевыпуск пары токенов
            if (ApiAbstract.isTokenUpdating) { //дедубликация запросов на обновление токена
                await new Promise(r => setTimeout(r, 100)); //sleep
                return await this.getToken();
            }
            ApiAbstract.isTokenUpdating = true;
            try {
                const data = await this.fetcher({
                    route: apiRoute_1.apiRouteUserRefresh,
                    postBody: { refreshToken: refreshToken }
                });
                await this.userStorage.setUser(data.accessToken, data.refreshToken);
                ApiAbstract.isTokenUpdating = false;
                return data.accessToken;
            }
            catch (error) {
                console.error(error);
                if (error instanceof apiError_1.ApiError) {
                    if (error.status === 404) { //токен не найден
                        await this.userStorage.clearUser();
                        await userLogout_1.eventBusUserLogout.broadcast();
                    }
                }
            }
            ApiAbstract.isTokenUpdating = false;
        }
        return null;
    }
}
exports.ApiAbstract = ApiAbstract;
ApiAbstract.isTokenUpdating = false;
