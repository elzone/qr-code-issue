import { iArticle } from "../interfaces/iArticle";
import { iBanner } from "../interfaces/iBanner";
import { BannerType, BannerTypeKeys } from "../interfaces/BannerType";
import { iBrand } from "../interfaces/iBrand";
import { iCatalog } from "../interfaces/iCatalog";
import { iCatalogPreview } from "../interfaces/iCatalogPreview";
import { iCity } from "../interfaces/iCity";
import { iContentItem } from "../interfaces/iContentItem";
import { iFilter } from "../interfaces/iFilter";
import { iInstruction } from "../interfaces/iInstruction";
import { iNode } from "../interfaces/iNode";
import { iNodeTree } from "../interfaces/iNodeTree";
import { iPagingItems } from "../interfaces/iPagingItems";
import { iSearchParams } from "../interfaces/iSearchParams";
import { iText } from "../interfaces/iText";
import { ApiAbstract } from "./abstract";
import { iShop } from "../interfaces/iShop";
import { iSymptoms } from "../interfaces/iSymptoms";
import { iStories } from "../interfaces/iStories";
import { iEnv } from "../interfaces/iEnv";
import { iIntro } from "../interfaces/iIntro";
export declare class ApiContent extends ApiAbstract {
    /**
     * получение настроек, включая размер реферальных вознаграждений
     */
    getEnv(): Promise<iEnv>;
    /**
     * получение дерева категорий. не обязательный параметр
     * @param {string} parent id категории от которой строится вложенность
     */
    getNodeTree(parent?: number): Promise<iNodeTree[]>;
    /**
     * получение списка категорий по фильтрам
     */
    /**
     * получение раздела
     */
    private getNodeByCode;
    /**
     * получение списка категорий по фильтрам
     */
    /**
    * получение списка статей
    */
    getArticleList<Keys extends keyof iArticle>({ select, page, //отсчет страниц с первой, чтобы не было путаницы
    filters, sorters, perPage, }: iSearchParams<iArticle, Keys>): Promise<iPagingItems<Pick<iArticle, Keys> & {
        url?: string;
    }, {
        [key: string]: unknown;
    } | undefined>>;
    /**
    * получение одной статьи
    */
    getArticleOne({ id }: {
        id: number;
    }): Promise<iContentItem<iArticle, {
        [key: string]: unknown;
    } | undefined>>;
    /**
    * получение списка акций
    * @param {number} params.nodeId - id раздела, если не передан будут выбраны товары всех разделов
    * @param {boolean} params.subNodes - включить или нет товары подкатегорий
    * @param {boolean} params.bookmarks - показать только избранные товары
    */
    getCatalogList({ nodeId, page, //отсчет страниц с первой, чтобы не было путаницы
    filters, perPage, subNodes, bookmarks, }: {
        nodeId?: number | undefined;
        page?: number;
        filters?: iFilter<iCatalog & {
            query?: string;
            shop?: number;
        }>;
        perPage?: number;
        subNodes?: boolean;
        bookmarks?: boolean;
    }): Promise<iPagingItems<iCatalogPreview, {
        [key: string]: unknown;
    } | undefined>>;
    /**
   * получение одного товара (акции)
   *  @param {string} id - id акции
   */
    getCatalogOne({ id }: {
        id: number;
    }): Promise<iContentItem<iCatalog, {
        [key: string]: unknown;
    } | undefined>>;
    /**
     * проверка действует ли акция в аптеке пользователя
     * @param {string} id - id акции
     */
    skuInUserShop({ id }: {
        id: number;
    }): Promise<boolean>;
    /**
     * проверка по ИНН аптеки участвует или нет акция в аптеке
     * @param {string} params.id - id акции
     * @param {string} params.inn - ИНН аптеки
     */
    inShopByInn({ id, inn }: {
        id: number;
        inn: number;
    }): Promise<boolean>;
    /**
  * симптомы
  * @param {number} props.page - страница. Отсчет страниц с первой, чтобы не было путаницы
  * @param {string} props.searchTitle - поисковая строка по началу названия банка
  */
    getSymptoms({ page, searchTitle }: {
        page: number;
        searchTitle?: string;
    }): Promise<iPagingItems<iSymptoms, {
        [key: string]: unknown;
    } | undefined>>;
    /**
     * получение списка производителей
     */
    getBrandList<Keys extends keyof iBrand>({ select, page, //отсчет страниц с первой, чтобы не было путаницы
    filters, sorters, perPage, }: iSearchParams<iBrand, Keys>): Promise<iPagingItems<Pick<iBrand, Keys> & {
        url?: string;
    }, {
        [key: string]: unknown;
    } | undefined>>;
    /**
    * политика конфиденциальности
    */
    getPolicy(): Promise<iNode<iText>>;
    /**
   * оферта
   */
    getTerms(): Promise<iNode<iText>>;
    /**
   * Правила программы лояльности
   */
    getLoyalty(): Promise<iNode<iText>>;
    /**
    * как получить деньги
    */
    getInstruction(): Promise<iPagingItems<iInstruction, {
        [key: string]: unknown;
    } | undefined>>;
    /**
   * банки для выбора при запросе на вывод средств
   * @param {number} props.page - страница. Отсчет страниц с первой, чтобы не было путаницы
   * @param {string} props.searchTitle - поисковая строка по началу названия банка
   */
    getBanks({ page, searchTitle }: {
        page: number;
        searchTitle?: string;
    }): Promise<iPagingItems<iInstruction, {
        [key: string]: unknown;
    } | undefined>>;
    /**
   * поиск города
   * @param {number} props.page - страница. Отсчет страниц с первой, чтобы не было путаницы
   * @param {string} props.searchTitle - поисковая строка по началу названия банка
   */
    getCityList({ page, searchTitle }: {
        page: number;
        searchTitle?: string;
    }): Promise<iPagingItems<iCity, {
        [key: string]: unknown;
    } | undefined>>;
    /**
    * получение одного города
    */
    getCityOne({ id }: {
        id: number;
    }): Promise<iContentItem<iArticle, {
        [key: string]: unknown;
    } | undefined>>;
    /**
     * поиск аптеки
     * @param {number} props.page - страница. Отсчет страниц с первой, чтобы не было путаницы
     * @param {string} props.searchTitle - поисковая строка по началу названия аптеки
     */
    getShopList({ page, searchTitle }: {
        page: number;
        searchTitle?: string;
    }): Promise<iPagingItems<iShop, {
        [key: string]: unknown;
    } | undefined>>;
    /**
    * получение одной аптеки
    */
    getShopOne({ id }: {
        id: number;
    }): Promise<iContentItem<iShop, {
        [key: string]: unknown;
    } | undefined>>;
    /**
     * баннер
     * @param {number} props.type - тип баннера
     */
    getBannerRand({ type }: {
        type: typeof BannerType[BannerTypeKeys];
    }): Promise<{
        item: iBanner | undefined;
    }>;
    /**
    * получение списка сторисов
    */
    getStoriesList<Keys extends keyof iStories>({ select, page, //отсчет страниц с первой, чтобы не было путаницы
    perPage, }: iSearchParams<iStories, Keys>): Promise<iPagingItems<Pick<iStories, Keys>>>;
    /**
    * получение одного сториса
    */
    getStoriesOne({ id }: {
        id: number;
    }): Promise<iContentItem<iStories>>;
    /**
   * получение списка интро (приветственная инструкция)
   */
    getIntro(): Promise<iPagingItems<iIntro, {
        [key: string]: unknown;
    } | undefined>>;
}
