"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiPayment = void 0;
const abstract_1 = require("./abstract");
const apiRoute_1 = require("../http/apiRoute");
const payoutType_1 = require("../interfaces/payoutType");
const apiError_1 = require("../http/apiError");
class ApiPayment extends abstract_1.ApiAbstract {
    /**
     * добавление запроса на выплату по системе быстрых платежей
     * * @param {number} props.sum - сумма выплаты
     * * @param {number} props.bank - id банка из справочника content.getBanks
     */
    async addSBP(props) {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        const data = await this.fetcher({
            route: apiRoute_1.apiRoutePaymentAdd,
            postBody: { ...props, type: payoutType_1.PayoutType.sbp },
            options: { addToken: true }
        });
        return data.payment;
    }
    /**
    * добавление запроса на выплату по номеру карты
    * * @param {number} props.sum - сумма выплаты
    * * @param {number} props.card_number - номер карты
    */
    async addCard(props) {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        const data = await this.fetcher({
            route: apiRoute_1.apiRoutePaymentAdd,
            postBody: { ...props, type: payoutType_1.PayoutType.card },
            options: { addToken: true }
        });
        return data.payment;
    }
    /**
     * список начислений
     * * @param {number} page - отсчет страниц с первой, чтобы не было путаницы
     */
    async getList({ page = 1, select, }) {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        return await this.fetcher({
            route: (0, apiRoute_1.apiRoutePaymentList)({
                page,
                sorters: ["id desc"],
                select
            }),
            options: { addToken: true }
        });
    }
    /**
     * баланс пользователя
     */
    async balance() {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        return await this.fetcher({
            route: apiRoute_1.apiRoutePaymentBalance,
            options: { addToken: true }
        });
    }
}
exports.ApiPayment = ApiPayment;
