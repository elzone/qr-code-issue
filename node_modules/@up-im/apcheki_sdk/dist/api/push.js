"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiPush = void 0;
const abstract_1 = require("./abstract");
const apiRoute_1 = require("../http/apiRoute");
const apiError_1 = require("../http/apiError");
class ApiPush extends abstract_1.ApiAbstract {
    /**
     * список пушей
     * * @param {number} page - отсчет страниц с первой, чтобы не было путаницы
     */
    async getList({ page = 1, filters, select, }) {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        return await this.fetcher({
            route: (0, apiRoute_1.apiRoutePushList)({
                page,
                filters,
                sorters: ["id desc"],
                select
            }),
            options: { addToken: true }
        });
    }
    /**
     * количество непрочитанных пушей
     */
    async countNew() {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        return await this.fetcher({
            route: apiRoute_1.apiRoutePushCountNew,
            options: { addToken: true }
        });
    }
    /**
     * добавления токена для пуш уведомления
     * * @param {number} props.token - сумма выплаты
     * * @param {number} props.appStore - магазин приложений
     */
    async register(props) {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        await this.fetcher({
            route: apiRoute_1.apiRoutePushRegister,
            postBody: props,
            options: { addToken: true }
        });
    }
    /**
     * удаление токена для пуш уведомления
     * * @param {number} props.token - сумма выплаты
     * * @param {number} props.appStore - магазин приложений
     */
    async delete(props) {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        await this.fetcher({
            route: apiRoute_1.apiRoutePushDelete,
            postBody: props,
            options: { addToken: true }
        });
    }
    /**
     * Пометить пуш просмотренным view = true
     * * @param {number} props.pushId - id пуша
     */
    async view({ pushId }) {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        await this.fetcher({
            route: apiRoute_1.apiRoutePushView,
            postBody: { id: pushId },
            options: { addToken: true }
        });
    }
}
exports.ApiPush = ApiPush;
