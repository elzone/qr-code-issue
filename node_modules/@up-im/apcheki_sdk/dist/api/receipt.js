"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiReceipt = void 0;
const abstract_1 = require("./abstract");
const apiRoute_1 = require("../http/apiRoute");
const apiError_1 = require("../http/apiError");
class ApiReceipt extends abstract_1.ApiAbstract {
    /**
     * регистрация чека
     * @param {number} props.fn: ФД
     * @param {number} props.fd: ФД
     * @param {number} props.fp: ФП
     * @param {number} props.sum: Сумма чека
     * @param {keyof iReceipt} props.t Дата в формате 20240715T1322 (как в QR коде)
     */
    async add(props) {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        const data = await this.fetcher({
            route: apiRoute_1.apiRouteReceiptAdd,
            postBody: props,
            options: { addToken: true }
        });
        return data.receipt;
    }
    /**
     * список чеков
     * @param {number} props.page - страница, отсчет с первой, чтобы не было путаницы
     * @param {keyof iReceipt} props.select - выбор полей ответа
     */
    async getList({ page = 1, select, }) {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        return await this.fetcher({
            route: (0, apiRoute_1.apiRouteReceiptList)({
                page,
                sorters: ["id desc"],
                select: select?.filter(it => it != "payments" && it != "cashback_sum")
            }),
            options: { addToken: true }
        });
    }
    /**
     * один чек с товарами внутри
     * * @param {number} id - id чека
     */
    async getOne({ id }) {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        return (await this.fetcher({
            route: (0, apiRoute_1.apiRouteReceiptItem)(id),
            options: { addToken: true }
        })).item;
    }
}
exports.ApiReceipt = ApiReceipt;
