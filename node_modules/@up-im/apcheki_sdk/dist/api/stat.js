"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiStat = void 0;
const abstract_1 = require("./abstract");
const apiRoute_1 = require("../http/apiRoute");
const userStatEvent_1 = require("../interfaces/userStatEvent");
const apiError_1 = require("../http/apiError");
const itemType_1 = require("../interfaces/itemType");
const viewEventType_1 = require("../interfaces/viewEventType");
const apiStatEvents_1 = require("../interfaces/apiStatEvents");
class ApiStat extends abstract_1.ApiAbstract {
    /**
     * добавление события открытия товара, бренда, статьи
     * @param {number} props.itemId - id элемента
     * @param {AddViewEvent} props.event - тип события
     */
    async add({ itemId, event, }) {
        if (typeof itemId != "number" || itemId <= 0)
            throw new apiError_1.ApiError(400, "ApiStat не корректный id элемента");
        if (!apiStatEvents_1.apiStatEvents.includes(event))
            throw new apiError_1.ApiError(400, "ApiStat Не правильный тип статистики");
        const itemType = itemType_1.ItemType[event.split("/")[0]];
        const eventType = viewEventType_1.ViewEventType[event.split("/")[1]];
        if (!itemType)
            throw new apiError_1.ApiError(400, `ApiStat Не верный тип элемента ${event.split("/")[0]} - ${itemType}`);
        if (!eventType)
            throw new apiError_1.ApiError(400, `ApiStat Не верный тип события ${event.split("/")[1]} - ${eventType}`);
        //повышаем кэшбек - просмотр презентации
        if (itemType == itemType_1.ItemType.CATALOG_SKU && eventType == viewEventType_1.ViewEventType.PRESENTATION_SUCCESS) {
            await this.fetcher({
                route: apiRoute_1.apiRouteStatAdd,
                postBody: {
                    sku: itemId,
                    event: userStatEvent_1.UserStatEvent.presentation
                },
                options: { addToken: true }
            });
        }
        //повышаем кэшбек - квиз
        if (itemType == itemType_1.ItemType.CATALOG_SKU && eventType == viewEventType_1.ViewEventType.QUESTIONS_SUCCESS) {
            await this.fetcher({
                route: apiRoute_1.apiRouteStatAdd,
                postBody: {
                    sku: itemId,
                    event: userStatEvent_1.UserStatEvent.quiz
                },
                options: { addToken: true }
            });
        }
        await this.fetcher({
            route: apiRoute_1.apiRouteViewAdd,
            postBody: {
                itemType,
                itemId,
                eventType
            },
            options: { addToken: true }
        });
    }
    /**
     * получения события просмотра презентации или прохождения квиза
     * @param {number} props.sku - массив id акции (не товара) до 50 элементов.
     */
    async getEvent(props) {
        if (!await this.userStorage.isAuth())
            throw new apiError_1.ApiError(401, "Пользователь не авторизован");
        const data = await this.fetcher({
            route: apiRoute_1.apiRouteStatGet,
            postBody: props,
            options: { addToken: true }
        });
        return data.items;
    }
}
exports.ApiStat = ApiStat;
