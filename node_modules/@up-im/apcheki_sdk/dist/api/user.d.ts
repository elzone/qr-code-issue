import { iUserEditProps } from "../interfaces/iUserEditProps";
import { iUser } from "../interfaces/iUser";
import { ApiAbstract } from "./abstract";
export declare class ApiUser extends ApiAbstract {
    /**
     * получает пользователя из расшифрованного JWT токена без запроса на backend
     */
    get(): Promise<import("../interfaces/iUserData").iUserData | null>;
    /**
     * получает полную информацию о пользователе с сервера
     */
    getFull(): Promise<iUser>;
    /**
    * 1ый этап регистрации или авторизации
    */
    loginOrRegisterByPhone({ phone }: {
        phone: string;
    }): Promise<void>;
    /**
     * 2ой этап регистрации или авторизации - ввод кода подтверждения
     */
    loginOrRegisterByPhoneConfirm({ phone, code }: {
        phone: string;
        code: string;
    }): Promise<import("../interfaces/iUserData").iUserData | null>;
    /**
    * Ввод реферального кода другого пользователя
    * @param {string} props.ref - реферальный код
    */
    setRef({ ref }: {
        ref: string;
    }): Promise<void>;
    /**
    * Установка любимой аптеки по ее ИНН
    * @param {string} props.inn - ИНН аптеки
    */
    setShopByInn({ inn }: {
        inn: number;
    }): Promise<void>;
    /**
    * редактирование пользователя
    * если метод вернул false - то необходимо ввести код из email и передать его в data.email_code
    * @param {string} props.email - опционально, для смены email. Если емейл не меняется то не передаем этот параметр или передаем пустую строку
    * @param {number} props.city - id города
    * @param {string} props.email_code - код отправленный на email. Первый раз метод вызывается без него, если метод вернул false необходимо вызвать повторно передав код из email
    */
    editUser(data: iUserEditProps): Promise<boolean>;
    /**
    * обновление аватарки
    */
    /**
    * выход из ЛК
    */
    logout(): Promise<void>;
    /**
    * выход из ЛК (выход со всех устройств, на сервере будет удален refresh token, accessToken продолжит действовать остаток своего времени. Другие устройства разлогинет в течении 5 минут)
    */
    logoutAllDevice(): Promise<void>;
    /**
   * подписка на событие logout
   */
    onLogout: (callback: () => Promise<void>) => () => void;
    /**
     * удаление аккаунта пользователя, сделавшего запрос и всех связанных с ним сущностей (уведомлений, выплат, чеков, статистики и т.д.)
     */
    delete(): Promise<void>;
    /**
    * возвращает реф. код пользователя, который другие пользователя вводят при регистрации
    */
    getMyReferer(): Promise<string | null>;
}
