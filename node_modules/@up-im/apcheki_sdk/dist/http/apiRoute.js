"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiRoutePushView = exports.apiRoutePushDelete = exports.apiRoutePushRegister = exports.apiRoutePushCountNew = exports.apiRoutePushList = exports.apiRouteBannerGetRand = exports.apiRouteBookmarksCount = exports.apiRouteBookmarksRemove = exports.apiRouteBookmarksAdd = exports.apiRouteBookmarksGet = exports.apiRouteStatGet = exports.apiRouteStatAdd = exports.apiRouteViewAdd = exports.apiRoutePaymentBalance = exports.apiRoutePaymentList = exports.apiRoutePaymentAdd = exports.apiRouteReceiptItem = exports.apiRouteReceiptList = exports.apiRouteReceiptUpdate = exports.apiRouteReceiptAdd = exports.apiRouteUserSetShopByInn = exports.apiRouteUserSetRef = exports.apiRouteUserDelete = exports.apiRouteUserLogout = exports.apiRouteUserUploadPhoto = exports.apiRouteUserEdit = exports.apiRouteUserLoginWithCode = exports.apiRouteUserRefresh = exports.apiRouteUserGetMe = exports.apiRouteGeoDetect = exports.apiRouteBasketMoveToDraft = exports.apiRouteBasketMutate = exports.apiRouteBasketGet = exports.apiRouteBasketTotal = exports.apiRouteCatalogInShopByInn = exports.apiRouteCatalogInUserShop = exports.apiRouteCatalogItem = exports.apiRouteCatalogList = exports.apiRouteNodeGeneratedLinks = exports.apiRouteNodeById = exports.apiRouteNode = exports.apiRouteNodeList = exports.apiRouteNodeTreeContentByFilters = exports.apiRouteNodeTree = exports.apiRouteItemById = exports.apiRouteItem = exports.apiRouteFilters = exports.apiRouteList = exports.apiRouteEnv = void 0;
const queryString_1 = require("../utils/queryString");
exports.apiRouteEnv = "/env";
const apiRouteList = ({ nodeCode, nodeGenerator, page = 1, //отсчет страниц с первой, чтобы не было путаницы
filters = undefined, sorters = undefined, select = undefined, perPage = undefined, subNodes = false, }) => {
    const hasFilters = filters && Object.keys(filters).length;
    if (!nodeCode.includes("/type") && !nodeCode.includes("/tag/")) {
        nodeCode = nodeCode.replaceAll("/", ".");
    }
    const getParams = [];
    if (hasFilters)
        getParams.push((0, queryString_1.queryString)({ filters: filters }));
    if (sorters)
        getParams.push((0, queryString_1.queryString)({ sorter: sorters }));
    if (select)
        getParams.push('select=' + select.join(","));
    if (perPage)
        getParams.push('perpage=' + perPage);
    if (subNodes)
        getParams.push('subnodes');
    return `/content/${nodeCode}/list/${page}` +
        (nodeGenerator?.length ? '/' + nodeGenerator.join(".") : '') +
        (getParams ? '?' : '') +
        getParams.join("&");
};
exports.apiRouteList = apiRouteList;
//метод получает фильтры и доступные значения фильтра
const apiRouteFilters = ({ nodeCode, nodeGenerator, filters = undefined, subNodes = false, }) => {
    if (!nodeCode.includes("/type") && !nodeCode.includes("/tag/")) {
        nodeCode = nodeCode.replaceAll("/", ".");
    }
    const getParams = [];
    const hasFilters = filters && Object.keys(filters).length;
    if (hasFilters)
        getParams.push((0, queryString_1.queryString)({ filters: filters }));
    if (subNodes)
        getParams.push('subnodes');
    return `/content/${nodeCode}/filters` +
        (nodeGenerator?.length ? '/' + nodeGenerator.join(".") : '') +
        (getParams ? '?' : '') +
        getParams.join("&");
};
exports.apiRouteFilters = apiRouteFilters;
const apiRouteItem = (nodeCode, itemCode) => `/content/${nodeCode.replaceAll("/", ".")}/item/code/${itemCode}`;
exports.apiRouteItem = apiRouteItem;
const apiRouteItemById = (nodeCode, itemId) => `/content/${nodeCode.replaceAll("/", ".")}/item/id/${itemId}`;
exports.apiRouteItemById = apiRouteItemById;
const apiRouteNodeTree = (parent = 0) => `/node/tree/${parent}`;
exports.apiRouteNodeTree = apiRouteNodeTree;
//метод получает фильтры, возвращает подкатегории в которых есть товары по этим фильтрам
const apiRouteNodeTreeContentByFilters = ({ parent, filters = undefined, subNodes, }) => {
    const getParams = [];
    const hasFilters = filters && Object.keys(filters).length;
    if (hasFilters)
        getParams.push((0, queryString_1.queryString)({ filters: filters }));
    if (subNodes)
        getParams.push('subnodes');
    return `/node/tree/by_content_filters/${parent}` +
        (getParams ? '?' : '') +
        getParams.join("&");
};
exports.apiRouteNodeTreeContentByFilters = apiRouteNodeTreeContentByFilters;
const apiRouteNodeList = ({ page = 1, //отсчет страниц с первой, чтобы не было путаницы
filters = undefined, sorter = undefined, perPage = undefined, setParams = false }) => {
    const hasFilters = filters && Object.keys(filters).length;
    const getParams = [];
    if (hasFilters)
        getParams.push((0, queryString_1.queryString)({ filters: filters }));
    if (sorter)
        getParams.push((0, queryString_1.queryString)({ sorter: sorter }));
    if (perPage)
        getParams.push('perpage=' + perPage);
    if (setParams)
        getParams.push('set_params');
    return `/node/list/${page}` +
        (getParams ? '?' : '') +
        getParams.join("&");
};
exports.apiRouteNodeList = apiRouteNodeList;
const apiRouteNode = (nodeCode, nodeGenerator) => `/node/item/${nodeCode.replaceAll("/", ".")}` +
    (nodeGenerator?.length ? '/' + nodeGenerator.join(".") : '');
exports.apiRouteNode = apiRouteNode;
const apiRouteNodeById = (nodeId) => `/node/item/id/${nodeId}`;
exports.apiRouteNodeById = apiRouteNodeById;
const apiRouteNodeGeneratedLinks = (nodeCode, pageIndex = 0, isAll = false) => `/content/${nodeCode.replaceAll("/", ".")}/generator_links/${pageIndex + 1}${isAll ? '/all' : ""}`;
exports.apiRouteNodeGeneratedLinks = apiRouteNodeGeneratedLinks;
//catalog
const apiRouteCatalogList = ({ nodeId, page = 1, //отсчет страниц с первой, чтобы не было путаницы
filters = undefined, sorters = undefined, perPage = undefined, subNodes = false, bookmarks, }) => {
    const hasFilters = filters && Object.keys(filters).length;
    const getParams = [];
    if (hasFilters)
        getParams.push((0, queryString_1.queryString)({ filters: filters }));
    if (sorters)
        getParams.push((0, queryString_1.queryString)({ sorter: sorters }));
    if (perPage)
        getParams.push('perpage=' + perPage);
    if (subNodes)
        getParams.push('subnodes');
    return `/content/catalog/${bookmarks ? 'bookmarks' : 'list'}/${nodeId}/${page}` +
        (getParams ? '?' : '') +
        getParams.join("&");
};
exports.apiRouteCatalogList = apiRouteCatalogList;
const apiRouteCatalogItem = (elementId) => `/content/catalog/item/${elementId}`;
exports.apiRouteCatalogItem = apiRouteCatalogItem;
const apiRouteCatalogInUserShop = (elementId) => `/content/catalog/in_user_shop/${elementId}`;
exports.apiRouteCatalogInUserShop = apiRouteCatalogInUserShop;
const apiRouteCatalogInShopByInn = (elementId, inn) => `/content/catalog/in_shop_by_inn/${elementId}/${inn}`;
exports.apiRouteCatalogInShopByInn = apiRouteCatalogInShopByInn;
exports.apiRouteCatalogInShopByInn;
//basket
const apiRouteBasketTotal = () => `/basket/total`;
exports.apiRouteBasketTotal = apiRouteBasketTotal;
const apiRouteBasketGet = () => `/basket/get`;
exports.apiRouteBasketGet = apiRouteBasketGet;
const apiRouteBasketMutate = () => `/basket/mutate`;
exports.apiRouteBasketMutate = apiRouteBasketMutate;
const apiRouteBasketMoveToDraft = () => `/basket/move_to_draft`;
exports.apiRouteBasketMoveToDraft = apiRouteBasketMoveToDraft;
//geo
exports.apiRouteGeoDetect = `/geo/detect`;
//user
exports.apiRouteUserGetMe = `/user/get_me`;
exports.apiRouteUserRefresh = `/user/refresh`;
exports.apiRouteUserLoginWithCode = `/user/login_with_code`;
exports.apiRouteUserEdit = '/user/edit';
exports.apiRouteUserUploadPhoto = '/user/upload_photo';
exports.apiRouteUserLogout = '/user/logout';
exports.apiRouteUserDelete = '/user/delete';
exports.apiRouteUserSetRef = '/user/set_ref';
exports.apiRouteUserSetShopByInn = '/user/set_shop_by_inn';
//receipt
exports.apiRouteReceiptAdd = '/receipt/add';
exports.apiRouteReceiptUpdate = '/receipt/update';
const apiRouteReceiptList = ({ page = 1, //отсчет страниц с первой, чтобы не было путаницы
filters = undefined, sorters = undefined, select = undefined, }) => {
    const hasFilters = filters && Object.keys(filters).length;
    const getParams = [];
    if (hasFilters)
        getParams.push((0, queryString_1.queryString)({ filters: filters }));
    if (sorters)
        getParams.push((0, queryString_1.queryString)({ sorter: sorters }));
    if (select)
        getParams.push('select=' + select.join(","));
    return `/receipt/list/${page}` +
        (getParams ? '?' : '') +
        getParams.join("&");
};
exports.apiRouteReceiptList = apiRouteReceiptList;
const apiRouteReceiptItem = (id) => `/receipt/item/${id}`;
exports.apiRouteReceiptItem = apiRouteReceiptItem;
//payment
exports.apiRoutePaymentAdd = '/payment/add';
const apiRoutePaymentList = ({ page = 1, //отсчет страниц с первой, чтобы не было путаницы
filters = undefined, sorters = undefined, select = undefined, }) => {
    const hasFilters = filters && Object.keys(filters).length;
    const getParams = [];
    if (hasFilters)
        getParams.push((0, queryString_1.queryString)({ filters: filters }));
    if (sorters)
        getParams.push((0, queryString_1.queryString)({ sorter: sorters }));
    if (select)
        getParams.push('select=' + select.join(","));
    return `/payment/list/${page}` +
        (getParams ? '?' : '') +
        getParams.join("&");
};
exports.apiRoutePaymentList = apiRoutePaymentList;
exports.apiRoutePaymentBalance = '/payment/balance';
//stat
exports.apiRouteViewAdd = '/view/add';
exports.apiRouteStatAdd = '/stat/add';
exports.apiRouteStatGet = '/stat/get';
//bookmarks
exports.apiRouteBookmarksGet = '/bookmarks/get';
exports.apiRouteBookmarksAdd = '/bookmarks/add';
exports.apiRouteBookmarksRemove = '/bookmarks/remove';
exports.apiRouteBookmarksCount = '/bookmarks/count';
//banner
const apiRouteBannerGetRand = (type) => `/banner/get_rand/${type}`;
exports.apiRouteBannerGetRand = apiRouteBannerGetRand;
//push
const apiRoutePushList = ({ page = 1, //отсчет страниц с первой, чтобы не было путаницы
filters = undefined, sorters = undefined, select = undefined, }) => {
    const hasFilters = filters && Object.keys(filters).length;
    const getParams = [];
    if (hasFilters)
        getParams.push((0, queryString_1.queryString)({ filters: filters }));
    if (sorters)
        getParams.push((0, queryString_1.queryString)({ sorter: sorters }));
    if (select)
        getParams.push('select=' + select.join(","));
    return `/push/list/${page}` +
        (getParams ? '?' : '') +
        getParams.join("&");
};
exports.apiRoutePushList = apiRoutePushList;
exports.apiRoutePushCountNew = '/push/count_new';
exports.apiRoutePushRegister = '/push/register';
exports.apiRoutePushDelete = '/push/delete';
exports.apiRoutePushView = '/push/view';
