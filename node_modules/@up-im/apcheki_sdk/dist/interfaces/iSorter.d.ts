export type iSorterValue = string;
type ExcludeMethods<T> = {
    [K in keyof T as (T[K] extends Function ? never : K)]: T[K];
};
type iSorterKey<TKey> = (TKey extends string ? `${TKey} asc` : never) | (TKey extends string ? `${TKey} desc` : never);
export type iSorter<T> = (iSorterKey<keyof ExcludeMethods<T>>)[];
export {};
