"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketClient = void 0;
class WebSocketClient {
    constructor(url, reconnectInterval = 1000, maxReconnectAttempts = 1000) {
        this.isReconnecting = false;
        this.sendMessageBuffer = [];
        this.openCallback = null;
        this.messageCallback = null;
        this.url = url;
        this.websocket = null;
        this.reconnectInterval = reconnectInterval;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = maxReconnectAttempts;
    }
    connect() {
        this.websocket = new WebSocket(this.url);
        this.websocket.onopen = async () => {
            console.log('Connected to WebSocket server');
            this.reconnectAttempts = 0;
            if (this.openCallback)
                await this.openCallback(); //auth
            this.send(); //send MessageBuffer
        };
        this.websocket.onmessage = (event) => {
            console.log('Received message:', event.data);
            if (this.messageCallback)
                this.messageCallback(event.data);
        };
        this.websocket.onerror = (event) => {
            console.error('WebSocket error:', event);
            this.reconnect();
        };
        this.websocket.onclose = (event) => {
            console.log('WebSocket connection closed:', event);
            if (event.code != 3001)
                this.reconnect();
        };
    }
    reconnect() {
        if (this.isReconnecting)
            return;
        this.isReconnecting = true;
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`Reconnecting... attempt ${this.reconnectAttempts}`);
            setTimeout(() => {
                this.isReconnecting = false;
                this.connect();
            }, this.reconnectInterval);
        }
        else {
            this.isReconnecting = false;
            console.error('Max reconnect attempts reached');
        }
    }
    send(message, priority) {
        if (message && priority)
            this.sendMessageBuffer.unshift(message);
        if (message && !priority)
            this.sendMessageBuffer.push(message);
        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
            while (this.sendMessageBuffer.length) {
                this.websocket.send(this.sendMessageBuffer.shift());
            }
        }
        else {
            console.log('WebSocket is not open. reconnect');
            this.reconnect();
        }
    }
    // Устанавливаем callback для открытия соединения
    onOpen(callback) {
        this.openCallback = callback;
    }
    // Устанавливаем callback для обработки входящих сообщений
    onMessage(callback) {
        this.messageCallback = callback;
    }
    // Закрытие WebSocket соединения
    close() {
        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
            this.websocket.close();
        }
    }
}
exports.WebSocketClient = WebSocketClient;
