"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserStorage = void 0;
const jwt_decode_1 = require("jwt-decode");
const default_1 = require("./default");
const userLogout_1 = require("../eventBus/userLogout");
class UserStorage {
    constructor(storage) {
        this.user = null; // = user
        this.accessToken = null;
        this.accessTokenExp = null; //строк действия accessToken
        this.localTimeDiff = 0; //смещение локального времени в браузере
        this.storage = storage || default_1.storageDefault;
    }
    async getUser() {
        if (this.user)
            return this.user;
        if (typeof window === 'undefined')
            return null; //SSR
        const userStorage = await this.storage.get('user');
        if (typeof userStorage != "string" && userStorage !== null && userStorage !== undefined) {
            throw new Error("Из storage получено некорректное значение пользователя. Должно быть строкой или null");
        }
        if (userStorage) {
            const userStorageDecoded = JSON.parse(userStorage);
            // check exp
            if (this.getCurrentTime() < userStorageDecoded.exp * 1000) { //тут срок refreshToken
                this.user = userStorageDecoded;
                return this.user;
            }
            else { //закончился срок refreshToken
                await this.clearUser();
                await userLogout_1.eventBusUserLogout.broadcast();
            }
        }
        return null;
    }
    async setUser(accessToken, refreshToken) {
        this.user = (0, jwt_decode_1.jwtDecode)(refreshToken);
        await this.storage.set('accessToken', accessToken);
        await this.storage.set('refreshToken', refreshToken);
        await this.storage.set('user', JSON.stringify(this.user));
        return this.user;
    }
    async saveUser({ firstname, lastname }) {
        if (this.user) {
            if (firstname)
                this.user.firstname = firstname;
            if (lastname)
                this.user.lastname = lastname;
            await this.storage.set('user', JSON.stringify(this.user));
        }
        return this.user;
    }
    async clearUser() {
        await this.storage.remove('accessToken');
        await this.storage.remove('refreshToken');
        await this.storage.remove('user');
        this.user = null;
        this.accessToken = null;
        this.accessTokenExp = null;
        this.localTimeDiff = 0;
    }
    getCurrentTime() {
        return Date.now() + this.localTimeDiff;
    }
    async getAccessToken() {
        if (typeof window === 'undefined')
            return null; //SSR
        //кэш с проверкой срока действия
        if (this.accessToken && this.accessTokenExp && this.localTimeDiff && this.getCurrentTime() < this.accessTokenExp * 1000) {
            return this.accessToken;
        }
        //создаем кэш
        this.accessToken = await this.storage.get('accessToken');
        if (typeof this.accessToken != "string" && this.accessToken !== null && this.accessToken !== undefined) {
            throw new Error("Из storage получено некорректное значение accessToken. Должно быть строкой или null");
        }
        if (!this.accessToken)
            return null; //токена нет
        const accessTokenDecoded = (0, jwt_decode_1.jwtDecode)(this.accessToken);
        this.localTimeDiff = accessTokenDecoded?.localTimeDiff ?? 0;
        this.accessTokenExp = accessTokenDecoded?.exp ?? null;
        if (accessTokenDecoded?.exp && this.getCurrentTime() < accessTokenDecoded.exp * 1000) {
            return this.accessToken;
        }
        return null;
    }
    async getRefreshToken() {
        if (typeof window === 'undefined')
            return null; //SSR
        const refreshTokenData = await this.getUser(); //возвращает раскодированный refreshToken и проверяет его дату
        if (refreshTokenData) {
            const refreshToken = await this.storage.get('refreshToken');
            if (typeof refreshToken != "string" && refreshToken !== null && refreshToken !== undefined) {
                throw new Error("Из storage получено некорректное значение refreshToken. Должно быть строкой или null");
            }
            if (refreshToken)
                return refreshToken;
        }
        return null;
    }
    async isAuth() {
        return !!(await this.getUser());
    }
}
exports.UserStorage = UserStorage;
