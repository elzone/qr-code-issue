import { eventBusUserLogout } from "../eventBus/userLogout"
import { ApiError } from "../http/apiError"
import { apiRouteUserRefresh } from "../http/apiRoute"
import { iUserTokens } from "../interfaces/iUserTokens"
import { UserStorage } from "../storage/user"

export class ApiAbstract {
    protected host: string
    protected userStorage: UserStorage
    private static isTokenUpdating = false

    constructor({ host, userStorage }: { host: string, userStorage: UserStorage }) {
        this.host = host
        this.userStorage = userStorage
    }

    protected async fetcher<TResponse>({
        route,
        postBody = null,
        options
    }: {
        route: string,
        postBody?: { [key: string]: any } | null,
        options?: RequestInit & {
            noConsoleError?: boolean
            addToken?: boolean
        }
    }): Promise<TResponse> {
        const formData = new FormData();
        if (postBody) {
            for (let key in postBody) {
                if (postBody[key] instanceof FileList) {
                    for (const value of postBody[key]) {
                        formData.append(key + '[]', value);
                    }
                } else if (Array.isArray(postBody[key])) {
                    for (const value of postBody[key]) {
                        if (value !== null && typeof value == "object") {
                            formData.append(key + '[]', JSON.stringify(value));
                        } else {
                            formData.append(key + '[]', value);
                        }
                    }
                } else if (typeof postBody[key] == "object") {
                    formData.append(key, JSON.stringify(postBody[key]));
                } else {
                    formData.append(key, postBody[key]);
                }
            }
        }
        let headers: { [key: string]: string } = {}
        if (options?.addToken) {
            const token = await this.getToken()
            headers["Authorization"] = `Bearer ${token}`
        } else if (route.startsWith('/user') && !!postBody) {
            headers["timestamp"] = Date.now().toString()
        }
        const res = await fetch(this.host + "/api" + route, {
            headers: headers,
            method: postBody ? "POST" : "GET",
            body: postBody ? formData : null,
            credentials: "include",
            ...options
        })

        if (!res.ok) {
            if (res.status == 413) throw new ApiError(res.status, "Слишком большой размер файла")
            if (res.status == 401) {
                await this.userStorage.clearUser()
                await eventBusUserLogout.broadcast()
            }
            if (res.status == 404 && !postBody) {
                if (!options?.noConsoleError) console.warn(`not_found: ${this.host + "/api" + route}`)
            }
            try {
                //пробуем расшифровать json с ошибкой
                const answer = await res.json()
                const error = new ApiError(res.status, answer.message)
                throw error
            } catch (error: unknown) {
                //ошибка расшифровки json
                if (!options?.noConsoleError) console.warn({ url: this.host + "/api" + route })
                if (!(error instanceof ApiError)) throw new ApiError(res.status, res.statusText)
                throw error
            }
        }

        return res.json()
    }

    protected async getToken(): Promise<string | null> {
        const accessToken = await this.userStorage.getAccessToken()
        if (accessToken) return accessToken

        const refreshToken = await this.userStorage.getRefreshToken()
        if (refreshToken) {
            //перевыпуск пары токенов
            if (ApiAbstract.isTokenUpdating) {//дедубликация запросов на обновление токена
                await new Promise(r => setTimeout(r, 100));//sleep
                return await this.getToken()
            }
            ApiAbstract.isTokenUpdating = true
            try {
                const data: iUserTokens = await this.fetcher({
                    route: apiRouteUserRefresh,
                    postBody: { refreshToken: refreshToken }
                })
                await this.userStorage.setUser(data.accessToken, data.refreshToken)
                ApiAbstract.isTokenUpdating = false
                return data.accessToken
            } catch (error: unknown) {
                console.error(error)
                if (error instanceof ApiError) {
                    if (error.status === 404) {//токен не найден
                        await this.userStorage.clearUser()
                        await eventBusUserLogout.broadcast()
                    }
                }
            }
            ApiAbstract.isTokenUpdating = false
        }
        return null
    }
}