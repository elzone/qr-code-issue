import { iMessage, iMessageOutgoing, iMessageView } from "../interfaces/iMessage"
import { ApiAbstract } from "./abstract"
import { WebSocketClient } from "../service/webSocketClient"
import { UserStorage } from "../storage/user"
import { ApiError } from "../http/apiError"
import { eventBusUserLogout } from "../eventBus/userLogout"
//import { eventBusUserLogin } from "../eventBus/userLogin"

export class ApiChat extends ApiAbstract {
    private client: WebSocketClient
    private messageHistory: iMessage[][] = []
    private messageSubscriptions = new Set<(messages: iMessage[]) => void>()

    constructor({ host, wsHost, userStorage }: { host: string, wsHost: string, userStorage: UserStorage }) {
        super({ host, userStorage });
        this.client = new WebSocketClient(wsHost)
        this.client.onOpen(async () => await this.auth())
        this.client.onMessage(message => {
            //prepare
            const data: iMessage[] = JSON.parse(message)
            if (!Array.isArray(data)) {
                console.error('Входящее сообщения должны быть массивом', data)
                return
            }
            for (const item of data) {
                if ("date" in item) item.date = new Date(item.date)
            }
            //broadcast
            for (const callback of Array.from(this.messageSubscriptions)) {
                callback(data)
            }
            //Последние 10 групп сообщений с сервера для новых подписчиков
            this.messageHistory.push(data)
            if (this.messageHistory.length > 10) {
                this.messageHistory.splice(0, this.messageHistory.length - 10);
            }
        })
        // eventBusUserLogin.subscribe(async () => this.client.connect())
        // this.userStorage.isAuth().then(isAuth => {
        //     if (isAuth) this.client.connect()
        // })
        eventBusUserLogout.subscribe(async () => this.client.close())
    }

    private async auth() {
        const token = await this.getToken()
        if (!token) {
            console.error("User token for WebSocket empty")
            return
        }
        this.client.send(JSON.stringify({ token }), true)
    }

    messageSubscribe(callback: (messages: iMessage[]) => void) {
        this.messageSubscriptions.add(callback)
        //Последние 10 групп сообщений с сервера для новых подписчиков
        for (const history of this.messageHistory) callback(history)
        return () => { this.messageSubscriptions.delete(callback) }
    }

    async sendMessage({ text, file }: { text: string, file?: FileList | File | null }) {
        const user = await this.userStorage?.getUser()
        if (!user) throw new ApiError(401, "Пользователь не авторизован")
        if (user.role !== 0) throw new ApiError(400, "Для тестирования чата авторизуйтесь под обычного пользователя")

        const convertToBase64 = (file: File): Promise<string> => {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result as string);
                reader.onerror = reject;
                reader.readAsDataURL(file);
            })
        }
        const firstFile = file instanceof FileList
            ? Array.from(file)?.pop()
            : file
        const message: iMessageOutgoing = {
            route: "/message",
            text,
            file: firstFile ? await convertToBase64(firstFile) : undefined
        }
        this.client.send(JSON.stringify(message))
    }
    sendView({ id }: { id: number }) {
        const message: iMessageView = {
            route: "/view",
            message_id: id
        }
        this.client.send(JSON.stringify(message))
    }
    // getDialogs({page}:{page: number}) {//оставим для оптимизации если диалогов будет много
    //     this.client.send(JSON.stringify({
    //         route: "/get/dialogs",
    //         page,
    //     }))
    // }
    getMessages({ page }: { page: number }) {
        this.client.send(JSON.stringify({
            route: "/get/messages",
            page,
        }))
    }
}