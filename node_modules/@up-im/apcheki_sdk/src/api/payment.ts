import { ApiAbstract } from "./abstract";
import { apiRoutePaymentAdd, apiRoutePaymentBalance, apiRoutePaymentList } from "../http/apiRoute";
import { iPagingItems } from "../interfaces/iPagingItems";
import { iPayment } from "../interfaces/iPayment";
import { PayoutType } from "../interfaces/payoutType";
import { ApiError } from "../http/apiError";
import { iBalance } from "../interfaces/iBalance";

export class ApiPayment extends ApiAbstract {
    /**
     * добавление запроса на выплату по системе быстрых платежей
     * * @param {number} props.sum - сумма выплаты
     * * @param {number} props.bank - id банка из справочника content.getBanks
     */
    async addSBP(props: { sum: number, bank: number }) {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        const data = await this.fetcher<{ payment: iPayment }>({
            route: apiRoutePaymentAdd,
            postBody: { ...props, type: PayoutType.sbp },
            options: { addToken: true }
        })
        return data.payment
    }
    /**
    * добавление запроса на выплату по номеру карты
    * * @param {number} props.sum - сумма выплаты
    * * @param {number} props.card_number - номер карты
    */
    async addCard(props: { sum: number, card_number: number }) {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        const data = await this.fetcher<{ payment: iPayment }>({
            route: apiRoutePaymentAdd,
            postBody: { ...props, type: PayoutType.card },
            options: { addToken: true }
        })
        return data.payment
    }
    /**
     * список начислений
     * * @param {number} page - отсчет страниц с первой, чтобы не было путаницы
     */
    async getList<Keys extends keyof iPayment>({
        page = 1,
        select,
    }: {
        page: number
        select: Keys[],
    }) {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        return await this.fetcher<iPagingItems<Pick<iPayment, Keys>>>({
            route: apiRoutePaymentList({
                page,
                sorters: ["id desc"],
                select
            }),
            options: { addToken: true }
        })
    }
    /**
     * баланс пользователя
     */
    async balance() {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        return await this.fetcher<iBalance>({
            route: apiRoutePaymentBalance,
            options: { addToken: true }
        })
    }
}