import { ApiAbstract } from "./abstract";
import { apiRoutePushCountNew, apiRoutePushDelete, apiRoutePushList, apiRoutePushRegister, apiRoutePushView } from "../http/apiRoute";
import { iPagingItems } from "../interfaces/iPagingItems";
import { ApiError } from "../http/apiError";
import { iPush } from "../interfaces/iPush";
import { iFilter } from "../interfaces/iFilter";

export class ApiPush extends ApiAbstract {
    /**
     * список пушей
     * * @param {number} page - отсчет страниц с первой, чтобы не было путаницы
     */
    async getList<Keys extends keyof iPush>({
        page = 1,
        filters,
        select,
    }: {
        page: number
        filters?: iFilter<iPush>,
        select: Keys[],
    }) {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        return await this.fetcher<iPagingItems<Pick<iPush, Keys>>>({
            route: apiRoutePushList({
                page,
                filters,
                sorters: ["id desc"],
                select
            }),
            options: { addToken: true }
        })
    }
    /**
     * количество непрочитанных пушей
     */
    async countNew() {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        return await this.fetcher<{ totalItems: number }>({
            route: apiRoutePushCountNew,
            options: { addToken: true }
        })
    }
    /**
     * добавления токена для пуш уведомления
     * * @param {number} props.token - сумма выплаты
     * * @param {number} props.appStore - магазин приложений
     */
    async register(props: { token: string, appStore: "App Store" | "Google Play" }) {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        await this.fetcher({
            route: apiRoutePushRegister,
            postBody: props,
            options: { addToken: true }
        })
    }
    /**
     * удаление токена для пуш уведомления
     * * @param {number} props.token - сумма выплаты
     * * @param {number} props.appStore - магазин приложений
     */
    async delete(props: { token: string, appStore: "App Store" | "Google Play" }) {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        await this.fetcher({
            route: apiRoutePushDelete,
            postBody: props,
            options: { addToken: true }
        })
    }
    /**
     * Пометить пуш просмотренным view = true
     * * @param {number} props.pushId - id пуша
     */
    async view({ pushId }: { pushId: number }) {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        await this.fetcher({
            route: apiRoutePushView,
            postBody: { id: pushId },
            options: { addToken: true }
        })
    }
}