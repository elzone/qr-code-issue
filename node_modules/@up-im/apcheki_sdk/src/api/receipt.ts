import { ApiAbstract } from "./abstract";
import { iReceiptAddProps } from "../interfaces/iReceiptAddProps";
import { apiRouteReceiptAdd, apiRouteReceiptItem, apiRouteReceiptList } from "../http/apiRoute";
import { iReceipt } from "../interfaces/iReceipt";
import { iPagingItems } from "../interfaces/iPagingItems";
import { ApiError } from "../http/apiError";

export class ApiReceipt extends ApiAbstract {
    /**
     * регистрация чека
     * @param {number} props.fn: ФД
     * @param {number} props.fd: ФД
     * @param {number} props.fp: ФП
     * @param {number} props.sum: Сумма чека
     * @param {keyof iReceipt} props.t Дата в формате 20240715T1322 (как в QR коде)
     */
    async add(props: iReceiptAddProps) {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        const data = await this.fetcher<{ receipt: iReceipt }>({
            route: apiRouteReceiptAdd,
            postBody: props,
            options: { addToken: true }
        })
        return data.receipt
    }
    /**
     * список чеков
     * @param {number} props.page - страница, отсчет с первой, чтобы не было путаницы
     * @param {keyof iReceipt} props.select - выбор полей ответа
     */
    async getList<Keys extends keyof Omit<iReceipt, "products">>({
        page = 1,
        select,
    }: {
        page: number
        select: Keys[],
    }) {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        return await this.fetcher<iPagingItems<Pick<Omit<iReceipt, "products">, Keys>>>({
            route: apiRouteReceiptList({
                page,
                sorters: ["id desc"],
                select: select?.filter(it => it != "payments" && it != "cashback_sum")
            }),
            options: { addToken: true }
        })
    }
    /**
     * один чек с товарами внутри
     * * @param {number} id - id чека
     */
    async getOne({ id }: { id: number }) {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        return (await this.fetcher<{ item: iReceipt }>({
            route: apiRouteReceiptItem(id),
            options: { addToken: true }
        })).item
    }
}