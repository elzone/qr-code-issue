import { ApiAbstract } from "./abstract";
import { apiRouteStatAdd, apiRouteStatGet, apiRouteViewAdd } from "../http/apiRoute";
import { UserStatEvent } from "../interfaces/userStatEvent";
import { iUserStat } from "../interfaces/iUserStat";
import { ApiError } from "../http/apiError";
import { ItemType } from "../interfaces/itemType";
import { ViewEventType } from "../interfaces/viewEventType";
import { apiStatEvents } from "../interfaces/apiStatEvents";

export class ApiStat extends ApiAbstract {
    /**
     * добавление события открытия товара, бренда, статьи
     * @param {number} props.itemId - id элемента
     * @param {AddViewEvent} props.event - тип события
     */
    async add({
        itemId,
        event,
    }: {
        itemId: number,
        event: typeof apiStatEvents[number],
    }) {
        if (typeof itemId != "number" || itemId <= 0) throw new ApiError(400, "ApiStat не корректный id элемента")
        if (!apiStatEvents.includes(event)) throw new ApiError(400, "ApiStat Не правильный тип статистики")
        const itemType = ItemType[event.split("/")[0] as keyof typeof ItemType]
        const eventType = ViewEventType[event.split("/")[1] as keyof typeof ViewEventType]
        if (!itemType) throw new ApiError(400, `ApiStat Не верный тип элемента ${event.split("/")[0]} - ${itemType}`)
        if (!eventType) throw new ApiError(400, `ApiStat Не верный тип события ${event.split("/")[1]} - ${eventType}`)
        //повышаем кэшбек - просмотр презентации
        if (itemType == ItemType.CATALOG_SKU && eventType == ViewEventType.PRESENTATION_SUCCESS) {
            await this.fetcher({
                route: apiRouteStatAdd,
                postBody: {
                    sku: itemId,
                    event: UserStatEvent.presentation
                },
                options: { addToken: true }
            })
        }
        //повышаем кэшбек - квиз
        if (itemType == ItemType.CATALOG_SKU && eventType == ViewEventType.QUESTIONS_SUCCESS) {
            await this.fetcher({
                route: apiRouteStatAdd,
                postBody: {
                    sku: itemId,
                    event: UserStatEvent.quiz
                },
                options: { addToken: true }
            })
        }
        await this.fetcher({
            route: apiRouteViewAdd,
            postBody: {
                itemType,
                itemId,
                eventType
            },
            options: { addToken: true }
        })
    }
    /**
     * получения события просмотра презентации или прохождения квиза
     * @param {number} props.sku - массив id акции (не товара) до 50 элементов.
     */
    async getEvent(props: { sku: number[] }) {
        if (!await this.userStorage.isAuth()) throw new ApiError(401, "Пользователь не авторизован")
        const data = await this.fetcher<{ items: iUserStat[] }>({
            route: apiRouteStatGet,
            postBody: props,
            options: { addToken: true }
        })
        return data.items
    }
}