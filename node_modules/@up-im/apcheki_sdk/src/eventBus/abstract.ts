const subscriptions: { [key: string]: Set<(...args: any[]) => Promise<void>> } = {}

const subscribe = (eventName: string, callback: (...args: any[]) => Promise<void>) => {
    if (!subscriptions[eventName]) {
        subscriptions[eventName] = new Set()
    }

    const callbacks = subscriptions[eventName]
    callbacks.add(callback)

    return () => {
        callbacks.delete(callback)

        if (callbacks.size === 0) {
            delete subscriptions[eventName]
        }
    }
}

const broadcast = async (eventName: string, ...args: any[]) => {
    if (!subscriptions[eventName]) return

    const callbacks = subscriptions[eventName]

    for (const callback of Array.from(callbacks)) {
        await callback(...args)
    }
}

export const abstract = {
    subscribe,
    broadcast
}