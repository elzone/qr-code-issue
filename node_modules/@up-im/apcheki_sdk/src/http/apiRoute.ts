import { iFilter } from "../interfaces/iFilter"
import { iGetNodeListProps } from "../interfaces/iGetNodeListProps"
import { iPayment } from "../interfaces/iPayment"
import { iPush } from "../interfaces/iPush"
import { iReceipt } from "../interfaces/iReceipt"
import { queryString } from "../utils/queryString"

export const apiRouteEnv = "/env"

export const apiRouteList = <T>({
    nodeCode,
    nodeGenerator,
    page = 1,//отсчет страниц с первой, чтобы не было путаницы
    filters = undefined,
    sorters = undefined,
    select = undefined,
    perPage = undefined,
    subNodes = false,
}: {
    nodeCode: string,
    nodeGenerator?: string[]
    page?: number,
    filters?: iFilter<T>,
    sorters?: string[]
    select?: string[]
    perPage?: number
    subNodes?: boolean
}) => {
    const hasFilters = filters && Object.keys(filters).length
    if (!nodeCode.includes("/type") && !nodeCode.includes("/tag/")) {
        nodeCode = nodeCode.replaceAll("/", ".")
    }
    const getParams: string[] = []
    if (hasFilters) getParams.push(queryString({ filters: filters }))
    if (sorters) getParams.push(queryString({ sorter: sorters }))
    if (select) getParams.push('select=' + select.join(","))
    if (perPage) getParams.push('perpage=' + perPage)
    if (subNodes) getParams.push('subnodes')
    return `/content/${nodeCode}/list/${page}` +
        (nodeGenerator?.length ? '/' + nodeGenerator.join(".") : '') +
        (getParams ? '?' : '') +
        getParams.join("&")
}
//метод получает фильтры и доступные значения фильтра
export const apiRouteFilters = <T>({
    nodeCode,
    nodeGenerator,
    filters = undefined,
    subNodes = false,
}: {
    nodeCode: string,
    nodeGenerator?: string[]
    filters?: iFilter<T>,
    subNodes?: boolean
}) => {
    if (!nodeCode.includes("/type") && !nodeCode.includes("/tag/")) {
        nodeCode = nodeCode.replaceAll("/", ".")
    }
    const getParams: string[] = []
    const hasFilters = filters && Object.keys(filters).length
    if (hasFilters) getParams.push(queryString({ filters: filters }))
    if (subNodes) getParams.push('subnodes')
    return `/content/${nodeCode}/filters` +
        (nodeGenerator?.length ? '/' + nodeGenerator.join(".") : '') +
        (getParams ? '?' : '') +
        getParams.join("&")
}
export const apiRouteItem = (nodeCode: string, itemCode: string) =>
    `/content/${nodeCode.replaceAll("/", ".")}/item/code/${itemCode}`

export const apiRouteItemById = (nodeCode: string, itemId: number) =>
    `/content/${nodeCode.replaceAll("/", ".")}/item/id/${itemId}`

export const apiRouteNodeTree = (parent: number = 0) => `/node/tree/${parent}`
//метод получает фильтры, возвращает подкатегории в которых есть товары по этим фильтрам
export const apiRouteNodeTreeContentByFilters = <T>({
    parent,
    filters = undefined,
    subNodes,
}: {
    parent: number,
    filters?: iFilter<T>,
    subNodes: boolean
}) => {
    const getParams: string[] = []
    const hasFilters = filters && Object.keys(filters).length
    if (hasFilters) getParams.push(queryString({ filters: filters }))
    if (subNodes) getParams.push('subnodes')
    return `/node/tree/by_content_filters/${parent}` +
        (getParams ? '?' : '') +
        getParams.join("&")
}
export const apiRouteNodeList = <T>({
    page = 1,//отсчет страниц с первой, чтобы не было путаницы
    filters = undefined,
    sorter = undefined,
    perPage = undefined,
    setParams = false
}: iGetNodeListProps<T>) => {
    const hasFilters = filters && Object.keys(filters).length
    const getParams: string[] = []
    if (hasFilters) getParams.push(queryString({ filters: filters }))
    if (sorter) getParams.push(queryString({ sorter: sorter }))
    if (perPage) getParams.push('perpage=' + perPage)
    if (setParams) getParams.push('set_params')
    return `/node/list/${page}` +
        (getParams ? '?' : '') +
        getParams.join("&")
}
export const apiRouteNode = (nodeCode: string, nodeGenerator?: string[]) =>
    `/node/item/${nodeCode.replaceAll("/", ".")}` +
    (nodeGenerator?.length ? '/' + nodeGenerator.join(".") : '')
export const apiRouteNodeById = (nodeId: number) => `/node/item/id/${nodeId}`
export const apiRouteNodeGeneratedLinks = (nodeCode: string, pageIndex: number = 0, isAll: boolean = false) =>
    `/content/${nodeCode.replaceAll("/", ".")}/generator_links/${pageIndex + 1}${isAll ? '/all' : ""}`

//catalog
export const apiRouteCatalogList = <T>({
    nodeId,
    page = 1,//отсчет страниц с первой, чтобы не было путаницы
    filters = undefined,
    sorters = undefined,
    perPage = undefined,
    subNodes = false,
    bookmarks,
}: {
    nodeId: number,
    page?: number,
    filters?: iFilter<T>,
    sorters?: string[]
    perPage?: number
    subNodes?: boolean
    bookmarks?: boolean
}) => {
    const hasFilters = filters && Object.keys(filters).length
    const getParams: string[] = []
    if (hasFilters) getParams.push(queryString({ filters: filters }))
    if (sorters) getParams.push(queryString({ sorter: sorters }))
    if (perPage) getParams.push('perpage=' + perPage)
    if (subNodes) getParams.push('subnodes')
    return `/content/catalog/${bookmarks ? 'bookmarks' : 'list'}/${nodeId}/${page}` +
        (getParams ? '?' : '') +
        getParams.join("&")
}
export const apiRouteCatalogItem = (elementId: number) =>
    `/content/catalog/item/${elementId}`

export const apiRouteCatalogInUserShop = (elementId: number) =>
    `/content/catalog/in_user_shop/${elementId}`
export const apiRouteCatalogInShopByInn = (elementId: number, inn:number) =>
    `/content/catalog/in_shop_by_inn/${elementId}/${inn}`
apiRouteCatalogInShopByInn
//basket
export const apiRouteBasketTotal = () => `/basket/total`
export const apiRouteBasketGet = () => `/basket/get`
export const apiRouteBasketMutate = () => `/basket/mutate`
export const apiRouteBasketMoveToDraft = () => `/basket/move_to_draft`
//geo
export const apiRouteGeoDetect = `/geo/detect`
//user
export const apiRouteUserGetMe = `/user/get_me`
export const apiRouteUserRefresh = `/user/refresh`
export const apiRouteUserLoginWithCode = `/user/login_with_code`
export const apiRouteUserEdit = '/user/edit'
export const apiRouteUserUploadPhoto = '/user/upload_photo'
export const apiRouteUserLogout = '/user/logout'
export const apiRouteUserDelete = '/user/delete'
export const apiRouteUserSetRef = '/user/set_ref'
export const apiRouteUserSetShopByInn = '/user/set_shop_by_inn'
//receipt
export const apiRouteReceiptAdd = '/receipt/add'
export const apiRouteReceiptUpdate = '/receipt/update'
export const apiRouteReceiptList = ({
    page = 1,//отсчет страниц с первой, чтобы не было путаницы
    filters = undefined,
    sorters = undefined,
    select = undefined,
}: {
    page?: number,
    filters?: iFilter<iReceipt>,
    sorters?: string[],
    select?: string[]
}) => {
    const hasFilters = filters && Object.keys(filters).length
    const getParams: string[] = []
    if (hasFilters) getParams.push(queryString({ filters: filters }))
    if (sorters) getParams.push(queryString({ sorter: sorters }))
    if (select) getParams.push('select=' + select.join(","))
    return `/receipt/list/${page}` +
        (getParams ? '?' : '') +
        getParams.join("&")
}
export const apiRouteReceiptItem = (id: number) => `/receipt/item/${id}`
//payment
export const apiRoutePaymentAdd = '/payment/add'
export const apiRoutePaymentList = ({
    page = 1,//отсчет страниц с первой, чтобы не было путаницы
    filters = undefined,
    sorters = undefined,
    select = undefined,
}: {
    page?: number,
    filters?: iFilter<iPayment>,
    sorters?: string[],
    select?: string[]
}) => {
    const hasFilters = filters && Object.keys(filters).length
    const getParams: string[] = []
    if (hasFilters) getParams.push(queryString({ filters: filters }))
    if (sorters) getParams.push(queryString({ sorter: sorters }))
    if (select) getParams.push('select=' + select.join(","))
    return `/payment/list/${page}` +
        (getParams ? '?' : '') +
        getParams.join("&")
}
export const apiRoutePaymentBalance = '/payment/balance'
//stat
export const apiRouteViewAdd = '/view/add'
export const apiRouteStatAdd = '/stat/add'
export const apiRouteStatGet = '/stat/get'
//bookmarks
export const apiRouteBookmarksGet = '/bookmarks/get'
export const apiRouteBookmarksAdd = '/bookmarks/add'
export const apiRouteBookmarksRemove = '/bookmarks/remove'
export const apiRouteBookmarksCount = '/bookmarks/count'
//banner
export const apiRouteBannerGetRand = (type: number) => `/banner/get_rand/${type}`
//push
export const apiRoutePushList = ({
    page = 1,//отсчет страниц с первой, чтобы не было путаницы
    filters = undefined,
    sorters = undefined,
    select = undefined,
}: {
    page?: number,
    filters?: iFilter<iPush>,
    sorters?: string[],
    select?: string[]
}) => {
    const hasFilters = filters && Object.keys(filters).length
    const getParams: string[] = []
    if (hasFilters) getParams.push(queryString({ filters: filters }))
    if (sorters) getParams.push(queryString({ sorter: sorters }))
    if (select) getParams.push('select=' + select.join(","))
    return `/push/list/${page}` +
        (getParams ? '?' : '') +
        getParams.join("&")
}
export const apiRoutePushCountNew = '/push/count_new'
export const apiRoutePushRegister = '/push/register'
export const apiRoutePushDelete = '/push/delete'
export const apiRoutePushView = '/push/view'