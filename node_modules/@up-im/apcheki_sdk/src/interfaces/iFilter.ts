export type iFilterValue = (string | number)[]

type ExcludeMethods<T> =
    { [K in keyof T as (T[K] extends Function ? never : K)]: T[K] }

type iFilterKey<TKey> =
    TKey |
    (TKey extends string ? `!${TKey}` : never) |
    (TKey extends string ? `>${TKey}` : never) |
    (TKey extends string ? `<${TKey}` : never) |
    (TKey extends string ? `*${TKey}` : never)

export type iFilter<T> = {//может содержать один вложенный фильтр для фильтрации по другой таблице
    [key in iFilterKey<keyof ExcludeMethods<T>>]?: iFilterValue |
    { [key in iFilterKey<keyof ExcludeMethods<T>>]?: iFilterValue }[]
}