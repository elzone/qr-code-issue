type OpenCallback = () => Promise<void>;
type MessageCallback = (message: string) => void;

export class WebSocketClient {
    private url: string;
    private websocket: WebSocket | null;
    private reconnectInterval: number;
    private reconnectAttempts: number;
    private maxReconnectAttempts: number;
    private isReconnecting: boolean = false
    private sendMessageBuffer: string[] = []
    private openCallback: OpenCallback | null = null
    private messageCallback: MessageCallback | null = null

    constructor(url: string, reconnectInterval = 1000, maxReconnectAttempts = 1000) {
        this.url = url;
        this.websocket = null;
        this.reconnectInterval = reconnectInterval;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = maxReconnectAttempts;
    }

    connect() {
        this.websocket = new WebSocket(this.url);

        this.websocket.onopen = async () => {
            console.log('Connected to WebSocket server');
            this.reconnectAttempts = 0;
            if (this.openCallback) await this.openCallback();//auth
            this.send();//send MessageBuffer
        };

        this.websocket.onmessage = (event: MessageEvent<string>) => {
            console.log('Received message:', event.data);
            if (this.messageCallback) this.messageCallback(event.data);
        };

        this.websocket.onerror = (event) => {
            console.error('WebSocket error:', event);
            this.reconnect();
        };

        this.websocket.onclose = (event) => {
            console.log('WebSocket connection closed:', event);
            if (event.code != 3001) this.reconnect();
        };
    }

    private reconnect() {
        if (this.isReconnecting) return
        this.isReconnecting = true
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`Reconnecting... attempt ${this.reconnectAttempts}`);
            setTimeout(() => {
                this.isReconnecting = false
                this.connect()
            }, this.reconnectInterval);
        } else {
            this.isReconnecting = false
            console.error('Max reconnect attempts reached');
        }
    }

    public send(message?: string, priority?: boolean) {
        if (message && priority) this.sendMessageBuffer.unshift(message)
        if (message && !priority) this.sendMessageBuffer.push(message)
        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
            while (this.sendMessageBuffer.length) {
                this.websocket.send(this.sendMessageBuffer.shift()!);
            }
        } else {
            console.log('WebSocket is not open. reconnect');
            this.reconnect();
        }
    }

    // Устанавливаем callback для открытия соединения
    public onOpen(callback: OpenCallback) {
        this.openCallback = callback;
    }

    // Устанавливаем callback для обработки входящих сообщений
    public onMessage(callback: MessageCallback) {
        this.messageCallback = callback;
    }

    // Закрытие WebSocket соединения
    public close() {
        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
            this.websocket.close();
        }
    }
}