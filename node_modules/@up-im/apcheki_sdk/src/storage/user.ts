import { jwtDecode } from "jwt-decode"
import { iStorage } from "../interfaces/iStorage"
import { iUserData } from "../interfaces/iUserData"
import { storageDefault } from "./default"
import { eventBusUserLogout } from "../eventBus/userLogout"

export class UserStorage {
    protected storage: iStorage
    private user: iUserData | null = null// = user
    private accessToken: string | null = null
    private accessTokenExp: number | null = null//строк действия accessToken
    private localTimeDiff: number = 0//смещение локального времени в браузере

    constructor(storage?: iStorage) {
        this.storage = storage || storageDefault
    }

    async getUser() {
        if (this.user) return this.user
        if (typeof window === 'undefined') return null//SSR
        const userStorage = await this.storage.get('user')
        if (typeof userStorage != "string" && userStorage !== null && userStorage !== undefined) {
            throw new Error("Из storage получено некорректное значение пользователя. Должно быть строкой или null")
        }
        if (userStorage) {
            const userStorageDecoded = JSON.parse(userStorage)
            // check exp
            if (this.getCurrentTime() < userStorageDecoded.exp * 1000) {//тут срок refreshToken
                this.user = userStorageDecoded
                return this.user
            } else {//закончился срок refreshToken
                await this.clearUser()
                await eventBusUserLogout.broadcast()
            }
        }
        return null
    }

    async setUser(accessToken: string, refreshToken: string) {
        this.user = jwtDecode(refreshToken)
        await this.storage.set('accessToken', accessToken)
        await this.storage.set('refreshToken', refreshToken)
        await this.storage.set('user', JSON.stringify(this.user))
        return this.user
    }

    async saveUser({ firstname, lastname }: { firstname?: string, lastname?: string }) {
        if (this.user) {
            if (firstname) this.user.firstname = firstname
            if (lastname) this.user.lastname = lastname
            await this.storage.set('user', JSON.stringify(this.user))
        }
        return this.user
    }

    async clearUser() {
        await this.storage.remove('accessToken')
        await this.storage.remove('refreshToken')
        await this.storage.remove('user')
        this.user = null
        this.accessToken = null
        this.accessTokenExp = null
        this.localTimeDiff = 0
    }

    private getCurrentTime() {
        return Date.now() + this.localTimeDiff
    }

    async getAccessToken(): Promise<string | null> {
        if (typeof window === 'undefined') return null//SSR

        //кэш с проверкой срока действия
        if (this.accessToken && this.accessTokenExp && this.localTimeDiff && this.getCurrentTime() < this.accessTokenExp * 1000) {
            return this.accessToken
        }
        //создаем кэш
        this.accessToken = await this.storage.get('accessToken')
        if (typeof this.accessToken != "string" && this.accessToken !== null && this.accessToken !== undefined) {
            throw new Error("Из storage получено некорректное значение accessToken. Должно быть строкой или null")
        }
        if (!this.accessToken) return null;//токена нет
        const accessTokenDecoded: iUserData | null = jwtDecode(this.accessToken)
        this.localTimeDiff = accessTokenDecoded?.localTimeDiff ?? 0
        this.accessTokenExp = accessTokenDecoded?.exp ?? null
        if (accessTokenDecoded?.exp && this.getCurrentTime() < accessTokenDecoded.exp * 1000) {
            return this.accessToken
        }
        return null
    }

    async getRefreshToken(): Promise<string | null> {
        if (typeof window === 'undefined') return null//SSR

        const refreshTokenData = await this.getUser()//возвращает раскодированный refreshToken и проверяет его дату
        if (refreshTokenData) {
            const refreshToken = await this.storage.get('refreshToken')
            if (typeof refreshToken != "string" && refreshToken !== null && refreshToken !== undefined) {
                throw new Error("Из storage получено некорректное значение refreshToken. Должно быть строкой или null")
            }
            if (refreshToken) return refreshToken
        }
        return null
    }

    async isAuth() {
        return !!(await this.getUser())
    }
}